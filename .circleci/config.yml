version: 2.1

reference:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ruby: &RUBY_IMAGE cimg/ruby:2.6.5
    security: &HORUS_IMAGE horuszup/horus-client:latest

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"

  filters: &FILTERS_DELIVERY
    branches:
      only:
        - /^release-.*/
        - qa

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

  filters-checks: &FILTERS_CHECK
    branches:
      only:
        - master
        - /^release-.*/
        - qa
        - /^pull\/.*$/

executors:
  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: /workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

  release-executor:
    docker:
      - image: *RUBY_IMAGE
        user: root
    working_directory: /workspace

  security-executor:
    machine: true

jobs:
  # Runs Go linters
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b /go/bin/ v1.24.0
      - run: go mod download
      - run:
          name: lint
          command: |
            /go/bin/golangci-lint run
  unit_test:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Running Unit tests
          command: |
            mkdir -p $TEST_RESULTS_DIR
            PACKAGE_NAMES=$(go list ./pkg/... | circleci tests split --split-by=timings --timings-type=classname)
            echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
            echo $PACKAGE_NAMES
            gotestsum --format=short-verbose \
              --junitfile $TEST_RESULTS_DIR/gotestsum-report.xml -- \
              -p 2 \
              -cover -coverprofile=coverage.txt \
              $PACKAGE_NAMES
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  functional_test:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
            at: /workspace/dist
      - run:
          name: Running Functional tests
          command: |
            make functional-test
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  security_test:
    executor: security-executor
    steps:
      - run:
          name: Horus Security Test
          command: |
            echo Starting Security Analysis...
            docker run --rm -e HORUS_CLIENT_REPO_URL=$HORUS_CLIENT_REPO_URL -e HORUS_CLIENT_REPO_BRANCH=$HORUS_CLIENT_REPO_BRANCH -e HORUS_CLIENT_API_ADDR=$HORUS_CLIENT_API_ADDR -e HORUS_CLIENT_TOKEN    =$HORUS_CLIENT_TOKEN -e HORUS_CLIENT_API_USE_HTTPS=$HORUS_CLIENT_API_USE_HTTPS -e HORUS_VULNERABILITY_CHECK=$HORUS_VULNERABILITY_CHECK *HORUS_IMAGE

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            . ./version.sh
            make build-circle
      - persist_to_workspace:
          root: dist
          paths:
            - linux
            - darwin
            - windows
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  delivery:
    executor: delivery-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Delivering cli binary
          command: |
            pip install awscli
            . ./version.sh
            . ./bucket.sh
            . ./credentials.sh
            make delivery
  release:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./version.sh
            make release
workflows:
  build-for-branch:
    jobs:
      - security_test:      
      - lint:
          filters:
            <<: *FILTERS_CHECK
      - unit_test:
          filters:
            <<: *FILTERS_CHECK
      - build:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - unit_test
            - lint
      - functional_test:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - build
      - delivery:
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - build
      - release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build

