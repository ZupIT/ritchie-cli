version: 2.1

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ruby: &RUBY_IMAGE cimg/ruby:2.6.5

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"

  filters: &FILTERS_DELIVERY
    branches:
      only:
        - /^release-.*/
        - qa
        - nightly
        - beta

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

  filters-checks: &FILTERS_CHECK_CODE
    branches:
      only:
        - master
        - /^release-.*/
        - qa
        - /^pull\/.*$/
        - /^feature.*/
        - /^fix.*/
        - nightly
        - beta

  filters-checks-pr: &FILTERS_CHECK_LINT
    branches:
      only:
        - qa
        - /^pull\/.*$/


executors:
  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: /workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

  release-executor:
    docker:
      - image: *RUBY_IMAGE
        user: root
    working_directory: /workspace

jobs:
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b /go/bin/ v1.24.0
      - run:
          name: lint
          command: |
            go mod download
            /go/bin/golangci-lint run

  unit_test:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Running Unit tests
          command: |
            mkdir -p $TEST_RESULTS_DIR
            go mod download
            PACKAGE_NAMES=$(go list ./pkg/... | circleci tests split --split-by=timings --timings-type=classname)
            echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
            echo $PACKAGE_NAMES
            gotestsum --format=short-verbose \
              --junitfile $TEST_RESULTS_DIR/gotestsum-report.xml -- \
              -p 2 \
              -cover -coverprofile=coverage.txt \
              $PACKAGE_NAMES
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  functional_test_single:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
            at: /workspace/dist
      - run:
          name: Setup Bash for Single
          command: |
            echo "export PATH=/workspace/dist/linux/single:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Running Functional tests for single
          command: |
            go mod download
            make functional-test-single


  functional_test_team:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Setup Bash for Team
          command: |
            echo "export PATH=/workspace/dist/linux/team:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Running Functional tests for team
          command: |
            go mod download
            make functional-test-team

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            . ./.circleci/scripts/version.sh
            go mod download
            make build-circle
      - persist_to_workspace:
          root: dist
          paths:
            - linux
            - darwin
            - windows
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  delivery:
    executor: delivery-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Delivering cli binary
          command: |
            pip install awscli
            . ./.circleci/scripts/version.sh
            . ./.circleci/scripts/bucket.sh
            . ./.circleci/scripts/credentials.sh
            make delivery
  release:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./.circleci/scripts/version.sh
            make release

  rebase_nightly:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Rebase Nightly
          command: |
            make rebase-nightly

workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 22 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - rebase_nightly

  build-for-branch:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK_LINT
      - unit_test:
          name: unit-tests
          filters:
            <<: *FILTERS_CHECK_CODE
      - build:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - unit-tests
      - functional_test_single:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build
      - functional_test_team:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build
      - delivery:
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - functional_test_single
            - functional_test_team
      - release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - delivery