#s3-tree
- request:
    method: GET
    url: ^/tree/tree.json$

  response:
    status: 200
    headers:
      content-type: application/json
    body: >
      {
        "commands": [
          {
            "parent": "root",
            "usage": "mock",
            "help": "mock commands",
          },
          {
            "parent": "root_mock",
            "usage": "test",
            "help": "mock test",
            "formula": {
              "path": "mock/test",
              "bin": "test-${so}",
              "binLinux": "test-${so}",
              "binDarwin": "test-${so}",
              "binWindows": "test-${so}.exe",
              "bundle": "${so}.zip",
              "config": "config.json",
            }
          }
        ]
      }
#s3-formulas-config.json
- request:
    method: GET
    url: ^/formulas/mock/test/config.json$

  response:
    status: 200
    headers:
      content-type: application/json
    body: >
      {
        "description": "Sample inputs in Ritchie.",
        "inputs" : [
          {
            "name" : "sample_text",
            "type" : "text",
            "label" : "Type : ",
            "cache" : {
              "active": true,
              "qtd" : 6,
              "newLabel" : "Type new value. "
            }
          },
          {
            "name" : "sample_list",
            "type" : "text",
            "default" : "in1",
            "items" : ["in_list1", "in_list2", "in_list3", "in_listN"],
            "label" : "Pick your : "
          },
          {
            "name" : "sample_bool",
            "type" : "bool",
            "default" : "false",
            "items" : ["false", "true"],
            "label" : "Pick: "
          },
          {
            "name" : "test_resolver",
            "type" : "CREDENTIAL_TEST"
          }
        ]
      }

#s3-formulas-zip
- request:
    method: GET
    url: ^/formulas/mock/test/linux.zip$

  response:
    status: 200
    headers:
      content-type: application/zip
    file: response.zip

#Post Login
- request:
    method: POST
    url: ^/login$

  response:
    status: 200
    headers:
      content-type: application/json
    body: >
      {
          "token": "dmF1bHQ6djE6WDJ2VzRpS0V4L3czOFpoUDNZYmNvaDVaeTltL2R0MVN1MWp2cnF3WjFzNGw1Qmhiem42U29EdnR1czBISTNZbU5EdGh1alJMRmJBQXlXZ2ZOR2hkaUFZcGptMGRHQ1I2Mkp4TG4vcXZMUVFXRlNlVnBaUDJjeDZoMStzeFh3MHQrYk9kdHc5NWVSMlEyQi9oZTVyOUpQM1NOUkp2ai82V2NOK3BEN2hmRVNzbVlTNW9xQ3piZko3elFJbjE1c3dmVEhCaDFzOFh2WEFyd080ZFF1MWpSeENTY2RDT3dkN2k0SjJvY2RiYzVOSnA1bGRuTTdVdjB3OWx0dHhSK2Z5S1BNQT0=",
          "ttl": 1591743763
      }

#Post Login
- request:
    method: POST
    url: ^/unauthorized/login$

  response:
    status: 401

#Get 500 set server
- request:
    method: GET
    url: ^/server/error$

  response:
    status: 500


#Get 200 on / with empty body
- request:
    method: GET
    url: ^/

  response:
    status: 200
    body: ""

#Get 200 on /otp with true on body
- request:
    method: GET
    url: /otp$

  response:
    status: 200
    headers:
      content-type: application/json
    body: >
      {
        "otp": true
      }

- request:
    method: GET
    url: /request-fail/otp$

  response:
    status: 500